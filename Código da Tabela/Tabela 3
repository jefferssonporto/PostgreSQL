Create Table NIVEL ( 
	CODIGONIVEL int NOT NULL,
	DESCRICAO varchar(90) NOT NULL,
	CONSTRAINT CHAVEPNIVEL PRIMARY KEY (CODIGOCODIGONIVEL));
Create table CURSO (
	CODIGOCURSO  int NOT NULL,
	NOME varchar(90) NOT NULL UNIQUE,
	DATACRIACAO date NULL,
    CODIGONIVEL int NULL, 
	CONSTRAINT CHAVEPCURSO PRIMARY KEY (CODIGOCURSO));
ALTER TABLE CURSO ADD FOREIGN KEY (CODIGOCODIGONIVEL) REFERENCES NIVEL;

INSERT INTO NIVEL(CODIGOCODIGONIVEL,DESCRICAO) VALUES (1,'Graduação');
INSERT INTO NIVEL(CODIGOCODIGONIVEL,DESCRICAO) VALUES (2,'Especialização');
INSERT INTO NIVEL (CODIGOCODIGONIVEL,DESCRICAO) VALUES (3,'Mestrado');
INSERT INTO NIVEL(CODIGOCODIGONIVEL,DESCRICAO) VALUES (4, 'Doutorado' );

INSERT INTO CURSO(CODIGOCURSO,NOME, DATACRIACAO, CODIGONIVEL)
	VALUES (1, 'Sistema da Informação', '19/06/1999',1 );
INSERT INTO CURSO(CODIGOCURSO,NOME, DATACRIACAO, CODIGONIVEL)
	VALUES (2, 'Medicina','10/05/1990'1);
INSERT INTO CURSO(CODIGOCURSO,NOME, DATACRIACAO, CODIGONIVEL)
	VALUES (3, 'Nutrição','19/02/2012', NULL);
INSERT INTO CURSO(CODIGOCURSO,NOME, DATACRIACAO, CODIGONIVEL)
	VALUES (4, 'Pedagogia','19/06/1999', 1);
INSERT INTO CURSO(CODIGOCURSO,NOME, DATACRIACAO, CODIGONIVEL)
	VALUES (5, 'Saude da Familia','10/09/1999',3);
INSERT INTO CURSO(CODIGOCURSO,NOME, DATACRIACAO, CODIGONIVEL)
	VALUES (6, 'Computação Aplicada', '10/09/1999',NULL);

/* conteúdo da tabela NIVEL*/ 
SELECT * FROM NIVEL;

/* conteúdo da tabela CURSO */
SELECT * FROM CURSO;

/* Conteudo inteiro da tabale NIVEL E CURSO*/
SELECT * FROM CURSO, NIVEL; /*e*/ SELECT * FROM CURSO CROSS JOIN NIVEL;

/* recuperar as linhas que correspondem à realidade cadastrada no banco de dados*/
SELECT * FROM CURSO, NIVEL WHERE NIVEL.CODIGONIVEL=CURSO.CODIGONIVEL;

/* junção interna sintaxe básica para recuperação de linhas*/ 
SELECT *
FROM TABELA1 [INNER] JOIN TABELA2 ON (CONDIÇÃOJUNÇÃO) [USING (COLUNA_DE_JUNÇÃO)] 
SELECT * FROM CURSO INNER JOIN NIVEL ON(NIVEL.CODIGONIVEL=CURSO.CODIGONIVEL);

/* é possível declarar a cláusula USING especificando a coluna alvo da junção*/ 
SELECT * FROM CURSO INNER JOIN NIVEL USING(CODIGONIVEL);

/*  exibir o código e o nome do curso, além do código e o nome do nível */
SELECT CURSO.CODIGOCURSO, CURSO.NOME, FROM CURSO INNER JOIN NIVEL USING(CODIGONIVEL);

/*junção interna corresponde somente aos registros que atendem à condição da junção*/ 
SELECT C.CODIGOCURSO, C.NOME,
2 N.CODIGONIVEL, N.DESCRICAO
3FROM CURSO INNER JOIN NIVEL ON
4 (NIVEL.CODIGONIVEL=CURSO.CODIGONIVEL);

 SELECT C.CODIGOCURSO, C.NOME,
    N.CODIGONIVEL, N.DESCRICAO
    FROM CURSO C INNER JOIN NIVEL N ON
    (N.CODIGONIVEL=C.CODIGONIVEL) ;

/* Para incluir no resultado da consulta todas as ocorrências da tabela CURSO, podemos usar a cláusula LEFT JOIN*/
 SELECT C.CODIGOCURSO, C.NOME, N.CODIGONIVEL, N.DESCRICAO
FROM CURSO C LEFT JOIN NIVEL N ON (N.CODIGONIVEL=C.CODIGONIVEL) ;

/* xibir todos os registros da tabela à direita da cláusula JOIN.*/
 SELECT C.CODIGOCURSO, C.NOME, N.CODIGONIVEL, N.DESCRICAO FROM CURSO C RIGHT JOIN NIVEL N ON
(N.CODIGONIVEL=C.CODIGONIVEL);

/*o mesmo resultado pode ser obtido se usarmos junção à esquerda e junção à direita, alternando a posição das tabelas envolvidas. Com isso, queremos dizer que TABELA1 LEFT JOIN TABELA2 é equivalente a TABELA2 RIGHT JOIN TABELA1*/
SELECT C.CODIGOCURSO, C.NOME, N.CODIGONIVEL, N.DESCRICAO FROM CURSO C LEFT JOIN NIVEL N ON (N.CODIGONIVEL=C.CODIGONIVEL);
SELECT C.CODIGOCURSO, C.NOME, N.CODIGONIVEL, N.DESCRICAO FROM NIVEL N RIGHT JOIN CURSO C ON (N.CODIGONIVEL=C.CODIGONIVEL);

/* Outro tipo de junção externa, denominada FULL OUTER JOIN (junção completa), apresenta todos os registros das tabelas à esquerda e à direita, mesmo os registros não relacionados. */
SELECT C.CODIGOCURSO, C.NOME, N.CODIGONIVEL, N.DESCRICAO FROM CURSO C FULL OUTER JOIN NIVEL N ON  (N.CODIGONIVEL=C.CODIGONIVEL);
